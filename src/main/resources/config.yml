# Specify your preferred storage type
# Types of storage available: MySQL, SQLite, FlatFile
# When using SQLite or FlatFile, "database" will be the name of the file that the data is stored in
storage:
  type: SQLite
  database: data
  table_prefix: hoarder_
  address: ''
  username: ''
  password: ''

# If Hoarder should pay players for selling to it
# Economy providers: Vault, PlayerPoints
economy:
  enabled: true
  provider: Vault
  random-pricing:
    enabled: false
    min: 1.20
    max: 3.70

command-aliases:
  - hoard

event:
  # The amount of time, in minutes, the Hoarder event should last for, set to 0 or lower to have Hoarder events only be started manually
  timer-length: 240
  # How often, in ticks, should Hoarder check to see if it has reached the specified timer-length
  # 20 ticks = 1 second. Changing this shouldn't be necessary. Recommended to leave at above at least 20 ticks (1 second)
  timer-check-interval: 600

  # The amount of winners and the amount of treasures given to them upon the Hoarder event ending.
  # Want to add more winners? Just add the spot that should win and the amount of treasures that should be given to them upon winning
  winners:
    1: 3 # First place gets 3 claimable Hoarder Treasures upon the event ending
    2: 2
    3: 1
    4: 1


treasure-items:
  # All treasure items must have an identifier that correlates to their item and their % chance in our database
  # Change this value if you would like to ALWAYS set your identifiers manually and never have Hoarder automatically make identifiers.
  # Identifiers that are made by Hoarder will have this format: <Item_DisplayName>-<Amount>
  # Changing this to false will require you to specify your identifier when doing /hoarder treasure add <chance/weight> <identifier>

  # If you don't understand, then just leave this value to true
  auto-identifier: true

  # When determining a random item to give to a player upon claiming a treasure item, Hoarder uses
  # a weight system. Weights for each item are set when adding it to the treasure pool.
  # When giving a player an item, Hoarder creates a random number between 0 - <bound-int> and if
  # the random number is equal to or less than the weight of the item, then the item is given to the player.
  # Else, we move onto a different item and repeat the process.

  # This value is the bound integer that represents the highest number the random num could be.
  # Use this if you want to scale your weights to be higher or lower
  # Example: I want to scale my weights to be 0 - 1000 instead of 0 - 100
  bound-int: 100

use-material-list-as-blacklist: false

# Materials that the Hoarder can pick from and the price that they will pay for them
materials:
  diamond: 5
  white_wool: 4.72
  iron_ingot: 3.5


